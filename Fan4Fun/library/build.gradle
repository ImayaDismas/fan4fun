apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply from: '../config/quality.gradle'

group ='com.dismas.imaya.fan4fun'
version = '0.1.1'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 23
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def bintrayUser = properties.getProperty('bintray.user')
def bintrayKey = properties.getProperty('bintray.apikey')

bintray {
    user = bintrayUser
    key = bintrayKey


    configurations = ['archives'] //When uploading configuration files

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = 'Cheerleader'
        desc = 'Cheerleader is an Android open source library implemented during our free time and designed to easily support an artist in an Android application thanks to a SoundCloud account.'
        websiteUrl = 'https://github.com/tvbarthel/Cheerleader'
        issueTrackerUrl = 'https://github.com/tvbarthel/Cheerleader/issues'
        vcsUrl = 'https://github.com/tvbarthel/Cheerleader.git'
        licenses = ['Apache-2.0']
        labels = ['android', 'music', 'artist', 'soundcloud', 'sound']
        publicDownloadNumbers = true
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }

    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Cheerleader'
                url 'https://github.com/tvbarthel/Cheerleader'
                description 'Cheerleader is an Android open source library implemented during our free time and designed to easily support an artist in an Android application thanks to a SoundCloud account.'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'tbarthel'
                        name 'Thomas Barthelemy'
                        email 'thomas.barthelemy.utc@gmail.com'
                    }
                }
                scm {
                    connection 'https://github.com/tvbarthel/Cheerleader.git'
                    developerConnection 'https://github.com/tvbarthel/Cheerleader.git'
                    url 'https://github.com/tvbarthel/Cheerleader'

                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:mediarouter-v7:23.2.1'
    compile 'com.squareup.retrofit:retrofit:1.8.0'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'com.squareup.picasso:picasso:2.4.0'
    //compile 'com.github.navasmdc:MaterialDesign:1.5@aar'
//    dependencies {
//        compile 'com.github.navasmdc:MaterialDesign:1.5@aar'
//    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
